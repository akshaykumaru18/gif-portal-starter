{"version":3,"sources":["App.js","index.js","assets/twitter-logo.svg"],"names":["TWITTER_LINK","concat","SystemProgram","web3","arr","Keypair","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","network","clusterApiUrl","opts","App","_useState","useState","_useState2","slicedToArray","walletAddress","setWalletAddress","_useState3","_useState4","inputValue","setInputValue","_useState5","_useState6","gifList","setGifList","checkIfWalletisConnected","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","_window","solana","response","wrap","_context","prev","next","window","isPhantom","connect","onlyIfTrusted","sent","console","log","publicKey","toString","alert","t0","error","stop","apply","this","arguments","useEffect","onLoad","_ref2","_callee2","_context2","addEventListener","removeEventListener","getGifList","_ref3","_callee3","provider","program","account","_context3","getProvider","Program","fetch","connectWallet","_ref4","_callee4","_window2","_context4","onInputChange","event","value","target","sendGif","_ref5","_callee5","_context5","length","abrupt","rpc","addGif","accounts","user","wallet","connection","Connection","Provider","createGifAccount","_ref6","_callee6","_context6","startStuffOff","systemProgram","programId","signers","react_default","createElement","className","onClick","onSubmit","preventDefault","type","placeholder","onChange","map","item","index","key","src","gifLink","alt","twitterLogo","href","rel","ReactDOM","render","StrictMode","src_App_0","document","getElementById","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.cc02f19c.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport \"./App.css\";\nimport idl from \"./idl.json\";\nimport { Connection, PublicKey, clusterApiUrl } from \"@solana/web3.js\";\nimport { Program, Provider, web3 } from \"@project-serum/anchor\";\nimport kp from './keypair.json'\n\n// Constants\nconst TWITTER_HANDLE = \"akshuAkshay18\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Create a keypair for the account that will hold the GIF data.\n//let baseAccount = Keypair.generate();\n\nconst arr = Object.values(kp._keypair.secretKey)\nconst secret = new Uint8Array(arr)\nconst baseAccount = web3.Keypair.fromSecretKey(secret)\n\n// Get our program's id from the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devnet.\nconst network = clusterApiUrl(\"devnet\");\n\n// Controls how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\",\n};\n\nconst App = () => {\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [gifList, setGifList] = useState([]);\n  const TEST_GIFS = [\n    \"https://i.giphy.com/media/eIG0HfouRQJQr1wBzz/giphy.webp\",\n    \"https://media3.giphy.com/media/L71a8LW2UrKwPaWNYM/giphy.gif?cid=ecf05e47rr9qizx2msjucl1xyvuu47d7kf25tqt2lvo024uo&rid=giphy.gif&ct=g\",\n    \"https://media4.giphy.com/media/AeFmQjHMtEySooOc8K/giphy.gif?cid=ecf05e47qdzhdma2y3ugn32lkgi972z9mpfzocjj6z1ro4ec&rid=giphy.gif&ct=g\",\n    \"https://i.giphy.com/media/PAqjdPkJLDsmBRSYUp/giphy.webp\",\n  ];\n\n  const checkIfWalletisConnected = async () => {\n    try {\n      const { solana } = window;\n      if (solana) {\n        if (solana.isPhantom) {\n          // alert(\"Phantom wallet detected good to go!\");\n\n          const response = await solana.connect({ onlyIfTrusted: true });\n          console.log(\n            \"Connected with Public Key:\",\n            response.publicKey.toString()\n          );\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert(\"Go get your phantom wallet\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  useEffect(() => {\n    const onLoad = async () => {\n      await checkIfWalletisConnected();\n    };\n    window.addEventListener(\"load\", onLoad);\n\n    return () => window.removeEventListener(\"load\", onLoad);\n  }, []);\n\n  const getGifList = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(\n        baseAccount.publicKey\n      );\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n    } catch (error) {\n      console.log(\"Error in getGifList: \", error);\n      setGifList(null);\n    }\n  };\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log(\"Fetching GIF list...\");\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  // useEffect(() => {\n  //   if (walletAddress) {\n  //     console.log(\"Fetching GIF list...\");\n\n  //     // Call Solana program here.\n\n  //     // Set state\n  //     setGifList(TEST_GIFS);\n  //   }\n  // }, [walletAddress]);\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana) {\n      const response = await solana.connect();\n      console.log(\"Connected with Public Key:\", response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No gif link given!\")\n      return\n    }\n    setInputValue('');\n    console.log('Gif link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n  \n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue)\n  \n      await getGifList();\n    } catch (error) {\n      console.log(\"Error sending GIF:\", error)\n    }\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n    return provider;\n  };\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      console.log(\"ping\");\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount],\n      });\n      console.log(\n        \"Created a new BaseAccount w/ address:\",\n        baseAccount.publicKey.toString()\n      );\n      await getGifList();\n    } catch (error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  };\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't been initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button\n            className=\"cta-button submit-gif-button\"\n            onClick={createGifAccount}\n          >\n            Do One-Time Initialization For GIF Program Account\n          </button>\n        </div>\n      );\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          <form\n            onSubmit={(event) => {\n              event.preventDefault();\n              sendGif();\n            }}\n          >\n            <input\n              type=\"text\"\n              placeholder=\"Enter gif link!\"\n              value={inputValue}\n              onChange={onInputChange}\n            />\n            <button type=\"submit\" className=\"cta-button submit-gif-button\">\n              Submit\n            </button>\n          </form>\n          <div className=\"gif-grid\">\n            {/* We use index as the key instead, also, the src is now item.gifLink */}\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} />\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className={walletAddress ? \"authed-container\" : \"container\"}>\n        <div className=\"header-container\">\n          <p className=\"header\">🖼 Meme Arena</p>\n          <p className=\"header\">\n            <u>Make community laugh & earn </u>\n          </p>\n          <p className=\"sub-text\">\n            Show you creativity, by making fun memes and earn for the laughs you\n            get :)\n          </p>\n          {!walletAddress && renderNotConnectedContainer()}\n          {walletAddress && renderConnectedContainer()}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/twitter-logo.5c97ee2a.svg\";"],"sourceRoot":""}